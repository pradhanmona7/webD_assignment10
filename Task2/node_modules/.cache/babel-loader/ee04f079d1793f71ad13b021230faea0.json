{"ast":null,"code":"var _jsxFileName = \"/Users/mohithparvataneni/Desktop/WEB_DEV/Assignment-8/src/weatherForecast.js\";\nimport React from \"react\";\nimport WeatherData from \"./data\";\nimport TextField from \"@material-ui/core/TextField\";\n\nvar moment = require(\"moment\");\n\nclass WeatherContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      completeData: [],\n      dailyData: [],\n      cityName: \"\",\n      hasError: false\n    };\n\n    this.changeText = event => {\n      this.setState({\n        cityName: event.target.value\n      });\n    };\n\n    this.componentDidMount = () => {\n      this.refreshData();\n    };\n\n    this.refreshData = () => {\n      const _url = `http://api.openweathermap.org/data/2.5/forecast?q=${this.state.cityName}&units=imperial&APPID=3981c77803578cc809ae7fa0836c638e`;\n      fetch(_url).then(res => res.json()).then(data => {\n        const _data = data.list.filter(reading => reading.dt_txt.includes(\"00:00:00\"));\n\n        data.list.map(function (name) {\n          let _date = new Date();\n\n          const weekday = name.dt;\n\n          _date.setTime(weekday);\n\n          name.day = moment(_date).format(\"ddd\");\n        });\n        this.setState({\n          hasError: false,\n          completeData: data.list,\n          dailyData: _data\n        }, () => console.log(this.state));\n      }).catch(err => {\n        this.setState({\n          hasError: true,\n          completeData: [],\n          dailyData: []\n        });\n      });\n    };\n\n    this.displayData = () => {\n      return this.state.dailyData.map((reading, index) => /*#__PURE__*/React.createElement(WeatherData, {\n        reading: reading,\n        key: index,\n        completeData: this.state.completeData,\n        cityName: this.state.cityName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 7\n        }\n      }));\n    };\n  }\n\n  render() {\n    let display;\n\n    if (this.state.completeData.length > 0 || this.state.hasError == \"false\") {\n      display = this.displayData();\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      id: \"city-name\",\n      label: \"Enter city\",\n      value: this.state.cityName,\n      onChange: this.changeText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"button\",\n      className: \"btn btn-info mt-2\",\n      value: \"Get Data\",\n      onClick: this.refreshData,\n      disabled: this.state.cityName == 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, this.state.cityName, \" Weather Data \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, display));\n  }\n\n}\n\nexport default WeatherContainer;","map":{"version":3,"sources":["/Users/mohithparvataneni/Desktop/WEB_DEV/Assignment-8/src/weatherForecast.js"],"names":["React","WeatherData","TextField","moment","require","WeatherContainer","Component","state","completeData","dailyData","cityName","hasError","changeText","event","setState","target","value","componentDidMount","refreshData","_url","fetch","then","res","json","data","_data","list","filter","reading","dt_txt","includes","map","name","_date","Date","weekday","dt","setTime","day","format","console","log","catch","err","displayData","index","render","display","length"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport WeatherData from \"./data\";\nimport TextField from \"@material-ui/core/TextField\";\nvar moment = require(\"moment\");\n\nclass WeatherContainer extends React.Component {\n  state = {\n    completeData: [],\n    dailyData: [],\n    cityName: \"\",\n    hasError: false,\n  };\n\n  render() {\n    let display;\n    if (this.state.completeData.length > 0 || this.state.hasError == \"false\") {\n      display = this.displayData();\n    } \n\n    return (\n      <div className=\"container\">\n        <br />\n        <br />\n        <TextField\n          id=\"city-name\"\n          label=\"Enter city\"\n          value={this.state.cityName}\n          onChange={this.changeText}\n        />\n        <br />\n        <input\n          type=\"button\"\n          className=\"btn btn-info mt-2\"\n          value=\"Get Data\"\n          onClick={this.refreshData}\n          disabled={this.state.cityName == 0}\n        />\n        <br />\n        <br />\n        <h1>{this.state.cityName} Weather Data </h1>\n        <br />\n\n        <div>{display}</div>\n      </div>\n    );\n  }\n\n  changeText = (event) => {\n    this.setState({ cityName: event.target.value });\n  };\n\n  componentDidMount = () => {\n    this.refreshData();\n  };\n\n  refreshData = () => {\n    const _url = `http://api.openweathermap.org/data/2.5/forecast?q=${this.state.cityName}&units=imperial&APPID=3981c77803578cc809ae7fa0836c638e`;\n    fetch(_url)\n      .then((res) => res.json())\n      .then((data) => {\n        const _data = data.list.filter((reading) =>\n          reading.dt_txt.includes(\"00:00:00\")\n        );\n        data.list.map(function (name) {\n          let _date = new Date();\n          const weekday = name.dt;\n          _date.setTime(weekday);\n          name.day = moment(_date).format(\"ddd\");\n        });\n        this.setState(\n          {\n            hasError: false,\n            completeData: data.list,\n            dailyData: _data,\n          },\n          () => console.log(this.state)\n        );\n      })\n      .catch((err) => {\n        this.setState({\n          hasError: true,\n          completeData: [],\n          dailyData: [],\n        });\n      });\n  };\n\n  displayData = () => {\n    return this.state.dailyData.map((reading, index) => (\n      <WeatherData\n        reading={reading}\n        key={index}\n        completeData={this.state.completeData}\n        cityName={this.state.cityName}\n      />\n    ));\n  };\n}\n\nexport default WeatherContainer;\n"]},"metadata":{},"sourceType":"module"}